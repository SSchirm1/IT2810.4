stages:
  - test

# enable postgres for all jobs
services:
  - postgres:latest
variables:
  POSTGRES_DB: test
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: ""
  POSTGRES_HOST_AUTH_METHOD: trust
  NODE_ENV: test

# tests the endpoints in /api
api-endpoints-test:
  image: node:14.3.0
  stage: test
  before_script:
    - cd /builds/it2810-h20/team-72/prosjekt-3/api
    - npm install
  script:
    - cd /builds/it2810-h20/team-72/prosjekt-3/api
    - npm test

# tests the whole application using cypress (end-2-end)
e2e-test:
  image: cypress/base:14
  stage: test
  before_script: # setup the api
      - cd /builds/it2810-h20/team-72/prosjekt-3/api
      - npm install
      - npm run schema:sync
      - npm run seed:run
      - npx pm2 start npm -- start # starts the /api in background, this is done so we can test the whole stack in isolation from production
      # this could also have been done using docker-compose
  script:
    - cd /builds/it2810-h20/team-72/prosjekt-3/frontend
    - npm ci
    # check Cypress binary path and cached versions
    - npx cypress cache path
    - npx cypress cache list
    - npm run cypress:verify
    - export CYPRESS_API_SERVER="http://localhost:8000/api" # sets the api cypress should use
    - export REACT_APP_API_SERVER="http://localhost:8000/api" # sets the api the react app should use
    - npm test  # run tests

# runs all unit-tests for frontend (tests for redux and react components)
frontend-unit-test:
  image: cypress/base:14
  stage: test
  script:
    - cd /builds/it2810-h20/team-72/prosjekt-3/frontend
    - npm ci
    - npm run jest # runs all unit tests using jest
